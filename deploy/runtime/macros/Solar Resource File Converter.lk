/*@

<p>This macro converts a solar resource file or batch of files from the TMY2, 
TMY3, EPW, or SolarAnywhere&reg; format to the SAM CSV format. These text file 
formats were orginally developed for the datasets described below.</p>
<br><br>
<ul>
<li><b>TMY2</b> is a non-delimited format developed by NREL for the National 
    Solar Radiation database for the 1961-1990 update.</li>
<li><b>TMY3</b> is a comma-delimited format developed by NREL for the NSRDB
    1991-2010 update.</li>
<li><b>EPW</b> is a comma-delimited format developed for the U.S. Department
    of Energy's EnergyPlus building simulation software.</li>
<li><b>SolarAnywhere</b> is a comma-delimited format used by Clean Power 
    Research's weather data service.</li>
</ul>

<p>Although SAM can read files in the TMY2, TMY3 and EPW format, those files
contain extra information about uncertainties and other values that SAM does not
use. They are also difficult to work with in spreadsheet software. You can use
this macro to convert those files to a "stripped" down copy with only the 
data that SAM uses in a file that you can edit or view in a spreadsheet program.</p>

<p>For more information about weather data for SAM, see the
<a href="https://sam.nrel.gov/weather-data"</a>Weather Data page</a> on the SAM
website.</p>

<p><b>To convert a file:</b></p>
<ol>
<li>Choose a file format from the list at right.</li>
<li>To convert a batch of files, choose <strong>Convert a batch of files</strong>.
When you run the macro, you will be prompted for a folder containing the batch
of files.
<li>To save converted files to a different folder than the originals, choose 
<strong>Choose output folder</strong>. When you run the script, you will be 
prompted to choose a folder.
<li>Click <b>Run macro</b> above and choose the weather file to convert.</li>
</ol>

<p>The macro will display messages in the console below about the progress of the
conversion. When the conversion is complete, it will open the folder containing
the converted files, and if you converted a single file, it will display data
from the file in ta DView window.</p>

@*/

// Macro user interface widgets
//@ name=format;type=combo;value=Choose format,TMY2/TMY3/EPW,SolarAnywhere;label=File format:;sel=0
//@ name=option;type;type=combo;value=Convert single file,Convert batch of files;label=Batch options:;sel=0
//@ name=folder;type;type=combo;value=Same folder as input files,Choose output folder;label=Output folder:;sel=0

////////////////////////////////////////////////////////////////////////////////
// Macro Inputs
////////////////////////////////////////////////////////////////////////////////

if ( typeof(macro) == 'unknown' ) {
	msgbox('This macro must be run from within a case.');
	exit;
}

format = macro.format;
if ( format == 'Choose format' ) {
	msgbox('Please choose a weather file format!\nChoose TMY2/TMY3/EPW or SolarAnywhere from the list at right, \nand then run the macro again.');
	exit;
}  
batch_option = macro.option;
folder_option = macro.folder;

////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////

// converts an array of numbers to a string
// note that using to_string(arr) does not work as well because 
// the string includes brackets and spaces between commas
function array_to_string( arr )
{
	str = '';
	for ( i=0; i<#arr; i++ )
	{
		str = str + to_string( arr[i] );
		if ( i < #arr - 1 ) str += ',';
	}
	return str;
}

// given a string filename, returns a filename without the extension, e.g., 
// my_file.csv returns my_file by removing characters to the right of the final
// period in the string including the period
function filename_only( fname )
{
	fname = file_only( fname );
	return left( fname , last_of( fname, '.' ) );
}

// SA files start with January 1 Hour 1 and end with January 1
// Hour 0. The SAM CSV format starts with January 1 Hour 0
// and ends with December 31 Hour 23. The following code attempts to
// correct that discrepancy by shifting the data by one hour.
function correct_time_stamp(h,d,m,y)
{			
	h = h - 1;
	if ( h == -1 ) {
		h = 23;
		d = d - 1;
		if ( d == 0 && m == 2) 
		{
			m = 1;
			d = 31;
		}
		if ( d == 0 && m == 3)
		{
			m = 2;
			d = 28;
		}
		if ( d == 0 && m == 4)
		{
			m = 3;
			d = 31;
		}
		if ( d == 0 && m == 5)
		{
			m = 4;
			d = 30;
		}
		if ( d == 0 && m == 6)
		{
			m = 5;
			d = 31;
		}
		if ( d == 0 && m == 7)
		{
			m = 6;
			d = 30;
		}
		if ( d == 0 && m == 8)
		{
			m = 7;
			d = 31;
		}
		if ( d == 0 && m == 9)
		{
			m = 8;
			d = 31;
		}
		if ( d == 0 && m == 10)
		{
			m = 9;
			d = 30;
		}
		if ( d == 0 && m == 11)
		{
			m = 10;
			d = 31;
		}
		if ( d == 0 && m == 12)
		{
			m = 11;
			d = 30;
		}
		if ( d == 0 && m == 1)
		{
			y = y-1;
			m = 12;
			d = 31;
		}
/*		elseif (m == 2 && d == 29) // February 29 is not converted below
		{
			y = y;
			m = 3;
			d = 1;
		}*/
	}			
}

function convert_file( file_format, weather_file , show_file , output_folder )
{
	if ( file_format == 'TMY2/TMY3/EPW' )
		result = convert_standard_file( weather_file , show_file , output_folder );
	elseif ( file_format == 'SolarAnywhere' )
		result = convert_sa_file ( weather_file, show_file , output_folder);
	else
		result = 'Not a valid file format.';
	return result;
}

// Uses SSC file converter to convert files from TMY2, TMY3, or EPW format
// to SAM CSV. Returns success or fail status as string.
// weather_file is full path to a weather file
// show_file = true to display folder and open DView
function convert_standard_file( weather_file , show_file , output_folder)
{
	outln('Converting ' + weather_file + ' from TMY2/TMY3/EPW format...');
	converted_file = '';
	obj = ssc_create();
	ssc_var( obj, 'input_file', weather_file );
	result = ssc_exec( obj, 'wfcsvconv', true );
	if ( result == 0 )
	{
		converted_file = ssc_var( obj, 'output_file');
		if ( file_exists( converted_file ) )
		{
			outln( '       ' + weather_file + '\n     converted to:\n       ' + converted_file );
		}
		else
			outln( '     Error: ' + weather_file + ' could not be converted.' );
	}
	else
		outln( '     Error: ' + result + '.' );
	ssc_free( obj );
	name = filename_only( weather_file )+ '_samcsv.csv';
	new_name = output_folder + '/' + name;
	ok = false;
	if ( file_exists( converted_file ) == true )
		ok = rename_file( converted_file , new_name );
	if ( ok == true )
		outln( '     and renamed to:\n       ' + new_name + '.' );
		if ( show_file == true )
		{
			browse( path_only( new_name ) ); // pop up folder where file exists
			dview_solar( new_name ); // load in DView
		}
	return 'Done.';
}

function get_file_list( output_folder )
{
	// get input folder
	folder = choose_dir( '', 'Weather Files to Convert' );
	file_list = dir_list( folder , 'tm2,csv,epw', false);
	for (i=0; i<#file_list; i++ )
	{
		file_list[i] = folder + '/' + file_list[i];
	}
	// prompt for optional different output folder
	if ( folder_option == 'Choose output folder' )
		output_folder = choose_dir( '', 'Folder for Converted Files' );
	else
		output_folder = folder;	
	return file_list;
}

function convert_sa_file( weather_file , show_file , output_folder )
{
	outln('Converting ' + weather_file + ' from SolarAnywhere format...');

	// get input file and open it
	input_file = wf;
	input_name = file_only( input_file );
	fin = 0;
	fout = 0;
	fin = open( input_file , 'r' );
	if ( fin == 0 )
		return 'Could not open file ' + input_name + ' for reading.';
	
	// get year from input file for the output file name
	// (need year in case we need it for multi-year input file)
	line = 0;
	ok = true;
	str_line = '';
	while ( read_line( fin, str_line ) && ok == true ) 
	{
		if ( line == 0 ) 
		{
			arr = split( str_line, ',');
			if ( #arr != 8 ) 
				return 'Input file does not appear to be in a SolarAnywhere format: First row has ' + #arr + ' columns instead of 8.';
		}
		if ( line == 2 ) 
		{
			arr = split( str_line, ',');
			arr = split( arr[0], '/');
			fyear1 = arr[0];
			ok = false;
			arr = split(arr[2], ' ');
			arr = split(arr[1], ':');
			t_shift = ( arr[0] == to_string(1) ); // only shift hour if Hour 1 is h=1, multi-year files may start at h=0
		}  
		line++;
	}
	seek(fin,0,0); // move position in input file back to beginning
	
	// open output file for writing
	name = filename_only( input_name );
	output_file = output_folder + '/' +  name + '_samcsv.csv';
	fout = open( output_file , 'w' );
	if ( fout == 0 )
		return 'Could not open ' + output_file + ' for writing. Is it open in Excel?';
	
	missing = -999;
	str_line = '';
	line = 0;
	ok = true;
	feb29 = false;
	fcount = 0;
	// read input file line by line and write to output file as we go
	while ( read_line( fin, str_line ) ) {
		// read header data from first row of input file. 
		// SA and SA TMY3 format use same header format
		// write first and second header rows to output file
		if ( line == 0 ) 
		{
			headers = 'Source,Location ID,City,State,Country,Latitude,Longitude,Time Zone,Elevation';
			ok = write_line( fout , to_string(headers) );
			if ( ok == false )
				return 'Failed to write column headers to file.';
			arr = split( str_line, ',' );
			if ( #arr != 8 )
				return 'Input file does not appear to be in a SolarAnywhere format: First row has ' + #arr + ' columns instead of 8.';
			h1[0] = "SolarAnywhere"; // source
			h1[1] = arr[0]; // location
			cs = split(arr[1],'-');
			city_state = split(cs[0],' ');
			state = city_state[#city_state-1];
			city_state -@ #city_state-1;
			city = join(city_state,' ');
			h1[2] = city; // city
			h1[3] = state; // region
			h1[4] = 'Unknown'; // country
			h1[5] = arr[4]; // latitude
			h1[6] = arr[5]; // longitude
			h1[7] = arr[3]; // time zone
			h1[8] = arr[6]; // elevation
			h1_str = array_to_string( h1 );
			ok = write_line( fout , h1_str );
			if ( ok == false )
				return 'Failed to write first header row to file.';
		}
		// skip reading second row of input file that contains column headers
		// write third header row to output file
		elseif ( line == 1 ) 
		{
			column_headers = 'Year,Month,Day,Hour,GHI,DNI,DHI,Tdry,Tdew,RH,Pres,Wspd,Wdir,Albedo';
			ok = write_line( fout , to_string(column_headers) );
			if ( ok == false ) 
				return 'Failed to write column headers to file.';
		}
		// convert data row from input file
		// write converted data row to output file
		else 
		{
			// replace empty data with -999 missing data flag
			data_str = '';
			for ( i=0; i<strlen(str_line); i++ ) 
			{
				ch_i = mid(str_line, i, 1);
				if ( ch_i == ',' && mid(str_line, i+1, 1) == ',' ) data_str = data_str + ch_i + to_string(missing);
				else data_str = data_str + ch_i;
			}
			// convert comma-separated row to an array
			arr = split( data_str, ',');
			// if less than 15 columns, assume format is SA 
			// number of columns varies between "time series" (12) and "average" (11) files
			// TMY3 format has 68 columns 
			if (#arr < 15 ) 
			{
				format = 'SolarAnywhere';
				datetime = split( arr[0] , ' ');
				date = split( datetime[0] , '/');
				hour = split( datetime[1] , ':');
				yr = to_int(date[0]);
				mo = to_int(date[1]);
				dy = to_int(date[2]);
				hr = to_int(hour[0]);
				if ( t_shift == true ) correct_time_stamp(hr,dy,mo,yr);
				data[0] = to_string(yr); // year
				data[1] = to_string(mo); // month
				data[2] = to_string(dy); // day
				data[3] = to_string(hr); // hour    
				data[4] = arr[1]; // ghi
				data[5] = arr[2]; // dni
				if (#arr<12) data[6] = missing;
				else data[6] = arr[9]; // dhi
				data[7] = arr[3]; // tdry
				data[8] = missing; // tdew
				data[9] = missing; // rh
				data[10] = missing; // pres
				data[11] = arr[4]; // wspd
				data[12] = missing; // wdir
				data[13] = missing; // alb
			}
			// if not 12 columns, assume format is SA TMY3
			else 
			{
				format = 'SolarAnywhere TMY3';
				date = split( arr[0] , '/');
				hour = split( arr[1] , ':');
				yr = to_int(date[2]);
				mo = to_int(date[0]);
				dy = to_int(date[1]);
				hr = to_int(hour[0]);
				if ( t_shift == true ) correct_time_stamp(hr,dy,mo,yr);
				data[0] = to_string(yr); // year
				data[1] = to_string(mo); // month
				data[2] = to_string(dy); // day
				data[3] = to_string(hr); // hour    
				data[4] = arr[4]; // ghi
				data[5] = arr[7]; // dni
				data[6] = arr[10]; // dhi
				data[7] = arr[31]; // tdry
				data[8] = arr[34]; // tdew
				data[9] = arr[37]; // rh
				data[10] = arr[40]; // pres
				data[11] = arr[46]; // wspd
				data[12] = arr[43]; // wdir
				data[13] = arr[61]; // alb
			}
			feb29 = ( mo == 2 && dy == 29 ); // feb29 is true for leap years
			// check to see if input file is multi-year file
			// if it is, close the output file and append year to file name 
			// then, open a new output file, and write header data to it
			if ( fcount != to_int( (line-2)/8760 ) ) 
			{
				close(fout);
				// if this is the first file in the multi-year series, rename it
				if (fcount == 0) 
				{ 
					outln('     Multi-year input file detected. Converting to separate files...');
					ok = rename_file( output_file , output_folder + '/' + name + '_samcsv_' + fyear1 + '.csv' );
					if (ok == true ) outln('       Year 1 file renamed to:\n       ' + name + '_samcsv_' + fyear1 + '.csv' );
					else outln('  Failed to rename Year 1 output file');
				}
				output_file =  output_folder + '/' + name + '_samcsv_' + yr + '.csv'; 
				fout = open( output_file , 'w' );
				write_line( fout , to_string(headers) );
				write_line( fout , array_to_string(h1) );
				write_line( fout , to_string(column_headers) );
				fcount++;
				outln('     Saving data for year ' + yr + ' in\n        ' + file_only(output_file) );
			}
			// write converted data row to output file, skipping February 29 for leap years
			if ( feb29 == false ) 
				ok = write_line( fout , array_to_string(data) );
			if ( ok == false )
				return '     Failed to write data row ' + line + ' to file.';
		}  
		if ( feb29 == false ) line++;
	}
	
	// close input and output files
	close(fout);
	close(fin);
	
	// check to see if input file was for a set of complete years
	// if not, rename the output file with a partial year
	// (assumes that partial year was the last year in the multi-year file)
	if ( mod(line-2,8760)!=0 ) { // line should be the total number of lines in the input file
		outln('        '+file_only(output_file) + ' does not contain a complete year of data.');
		ok = rename_file( output_file , output_folder + '/' + name +'_samcsv_' + to_string(yr) + 'part.csv');
		if (ok==true) outln('         File renamed to:\n         ' + name +'_samcsv_' + to_string(yr) + 'part.csv' );
		else outln('        Unable to rename ' + file_only(output_file) );
	}
	
	if ( fcount == 0 )
		outln('     Converted \n       ' + filename_only(weather_file)  + '\n     to:\n       ' + filename_only(output_file) );
	
	browse( output_folder ); // pop up folder where file exists

	
	// if input file is for a single year, show converted data in data viewer
	if (fcount == 0 && show_file == true ) {
		outln('     Displaying data from ' + file_only(output_file) + '.');
	
		csv_data = csvread( output_file , { 'skip'=2 } );
		data_headers=csv_data[0];
		csv_data -@ 0;
		num_cols = #data_headers; // skip time stamp columns
		num_rows = #csv_data; // data rows not including header
		ts = 8760 / num_rows; // time step in hours
	
		for (i=4;i<num_cols;i++) names[i-4]=data_headers[i]; // skip time stamp columns
		num_cols = #names;
		units = ['W/m2','W/m2','W/m2','C','C','%','millibar','m/s','deg',''];
		window_title = file_only(output_file);
	
		// GHI
		dataset1_name = names[0]; 
		dataset1_units = units[0];
		dataset1_selected = 1;
		dataset1_data = alloc(num_rows);
		for (i=0;i<num_rows;i++) ghi[i] = to_real(csv_data[i][4]);
		dataset1_data = ghi;
	
		// DNI
		dataset2_name = names[1]; 
		dataset2_units = units[1];
		dataset2_selected = 0;
		dataset2_data = alloc(num_rows);
		for (i=0;i<num_rows;i++) dni[i] = to_real(csv_data[i][5]);
		dataset2_data = dni;
	
		// DHI
		dataset3_name = names[2]; 
		dataset3_units = units[2];
		dataset3_selected = 0;
		dataset3_data = alloc(num_rows);
		for (i=0;i<num_rows;i++) dhi[i] = to_real(csv_data[i][6]);
		dataset3_data = dhi;
	
		// Tdry
		dataset4_name = names[3]; 
		dataset4_units = units[3];
		dataset4_selected = 0;
		dataset4_data = alloc(num_rows);
		for (i=0;i<num_rows;i++) tdry[i] = to_real(csv_data[i][7]);
		dataset4_data = tdry;
	
		// Tdew
		dataset5_name = names[4]; 
		dataset5_units = units[4];
		dataset5_selected = 0;
		dataset5_data = alloc(num_rows);
		for (i=0;i<num_rows;i++) tdew[i] = to_real(csv_data[i][8]);
		dataset5_data = tdew;
	
		// RH
		dataset6_name = names[5]; 
		dataset6_units = units[5];
		dataset6_selected = 0;
		dataset6_data = alloc(num_rows);
		for (i=0;i<num_rows;i++) rh[i] = to_real(csv_data[i][9]);
		dataset6_data = rh;
	
		// Pres
		dataset7_name = names[6]; 
		dataset7_units = units[6];
		dataset7_selected = 0;
		dataset7_data = alloc(num_rows);
		for (i=0;i<num_rows;i++) pres[i] = to_real(csv_data[i][10]);
		dataset7_data = pres;
	
		// Wspd
		dataset8_name = names[7]; 
		dataset8_units = units[7];
		dataset8_selected = 0;
		dataset8_data = alloc(num_rows);
		for (i=0;i<num_rows;i++) wspd[i] = to_real(csv_data[i][11]);
		dataset8_data = wspd;
	
		// Wdir
		dataset9_name = names[8]; 
		dataset9_units = units[8];
		dataset9_selected = 0;
		dataset9_data = alloc(num_rows);
		for (i=0;i<num_rows;i++) wdir[i] = to_real(csv_data[i][12]);
		dataset9_data = wdir;
	
		// Albedo
		dataset10_name = names[9]; 
		dataset10_units = units[9];
		dataset10_selected = 0;
		dataset10_data = alloc(num_rows);
		for (i=0;i<num_rows;i++) alb[i] = to_real(csv_data[i][13]);
		dataset10_data = alb;

		// create dview window 
		dview(num_cols, ts, window_title,
			dataset1_name, dataset1_units, dataset1_selected, dataset1_data,
			dataset2_name, dataset2_units, dataset2_selected, dataset2_data,
			dataset3_name, dataset3_units, dataset3_selected, dataset3_data,
			dataset4_name, dataset4_units, dataset4_selected, dataset4_data,
			dataset5_name, dataset5_units, dataset5_selected, dataset5_data,
			dataset6_name, dataset6_units, dataset6_selected, dataset6_data,
			dataset7_name, dataset7_units, dataset7_selected, dataset7_data,
			dataset8_name, dataset8_units, dataset8_selected, dataset8_data,
			dataset9_name, dataset9_units, dataset9_selected, dataset9_data,
			dataset10_name, dataset10_units, dataset10_selected, dataset10_data
		);
	}
	return 'Done.';
}

////////////////////////////////////////////////////////////////////////////////
// Main
////////////////////////////////////////////////////////////////////////////////

if ( batch_option == 'Convert single file' )
{
	wf = choose_file( '', 'Choose weather file to convert', 'Weather Files (*.csv;*.tm2;*.tm3;*.epw)|*.csv;*.tm2;*.tm3;*.epw' );
	if ( wf == '' ) return;
	if ( folder_option == 'Choose output folder' )
		out_folder = choose_dir( '', 'Folder for Converted Files' );
	else
		out_folder = path_only( wf );	
	show_dview = true;
	outln( convert_file( format, wf, show_dview, out_folder) );
}
else // batch convert
{
	show_dview = false;
	out_folder = '';
	files = get_file_list( out_folder );
	for ( i = 0; i<#files; i++ )
	{
		outln('File ' + to_string(i+1) + ' of ' + to_string(#files) + ':');
		wf = files[i];
		outln( convert_file( format, wf, show_dview, out_folder) );
	}
}
