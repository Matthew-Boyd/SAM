/*@

<br><br>
This macro provides information to help in sizing your system.
<br> <br>
It also provides suggestions for: (1) number of strings (2) other modules (from CEC Module database and Sandia Module database) to reduce the clipping losses

<br><br>
<b>Instructions:</b>
<ol>
<li> Provide the Light Induced Degradation value and Annual Panel Degradation
<li> Specify whether suggestions for other modules should be from the same manufacturer or all the manufacturers
<li> Specify threshold for allowable clipping time.
</ol>
@*/

// Macro user interface widgets
//@ name=lid;type=number;label=Light Induced Degradation (%):;value=1
//@ name=panel_degrad;type=number;label=Annual Panel Degradation (%):;value=1
//@ name=manufacturer;type=combo;label=Suggestions for other modules:;value=1) From same manufacturer,2) From all manufacturers;sel=0
//@ name=clipping_time;type=number;label=Allowable clipping time (hrs):;value=100

// display warning if the macro is run outside of a case
if ( typeof(macro) == 'unknown' ) {
	msgbox('This macro must be run from within a case.');
	exit;
}

//check if there is a financial configuration
financial = true;
if (configuration()[1] == 'None')
	financial = false;

// retrieve input variables from interface
lid = (1 - macro.lid/100); //convert from percent to factor
panel_degrad = (1 - macro.panel_degrad/100); //convert from percent to factor

// Run simulation and compute relevant statistics******************************************************************************************************************************************************
simulate();

//DC-AC Ratio information
nameplate_dcac = get('system_capacity') / get('total_inverter_capacity'); //nameplate DC capacity over nameplate AC capacity
first_yr_dcac = get('system_capacity') * lid / get('total_inverter_capacity'); //effective DC capacity after LID is applied over nameplate AC capacity
if (financial)
	last_yr_dcac = (get('system_capacity') * lid) * pow(panel_degrad, get('analysis_period')) / get('total_inverter_capacity'); //effective DC capacity at end of system lifetime after LID and panel degradation, over nameplate AC capacity (no inverter degradation)

//First-year inverter power limiting clipping
hourly_cliploss = get('inv_cliploss');
clipped_hours = 0; //how many hours are clipped per year
for (i=0; i<8760; i++)
	if(hourly_cliploss[i]>0)
		clipped_hours++;
clipped_power = get('annual_inv_cliploss'); //total kWh AC that were clipped
clipped_percent_ac = (clipped_power / (clipped_power + get('annual_ac_gross'))) * 100; //clipped power over the total AC power that would have been produced had the inverters not been clipping, converted to %
clipped_percent_dc = get('annual_ac_inv_clip_loss_percent'); //clipped AC power over total DC power produced by system, converted to %

//First-year inverter mppt voltage limit clipping
hourly_mpptloss = get('dc_invmppt_loss');
mppt_hours = 0; //how many hours are clipped per year
for (i=0; i<8760; i++)
	if(hourly_mpptloss[i]>0)
		mppt_hours++;
mppt_power = get('annual_dc_invmppt_loss'); //total kWh AC that were clipped
mppt_percent_ac = (mppt_power / (mppt_power + get('annual_ac_gross'))) * 100; //clipped power over the total AC power that would have been produced had the inverters not been clipping, converted to %
mppt_percent_dc = get('annual_dc_mppt_clip_loss_percent'); //clipped AC power over total DC power produced by system, converted to %


//Inverter MPPT performance
inv_mppt_low = get('mppt_low_inverter'); //Volts
inv_mppt_hi = get('mppt_hi_inverter'); //Volts
inv_voltage_max = get('vdcmax_inverter'); //Volts

subarrays = [1, 0, 0, 0]; //subarray1 is always enabled
actual_voltage_hi = [-999, -999, -999, -999]; //initialize arrays for each subarray
actual_voltage_low = [999, 999, 999, 999];
sunup = get('sunup');

for (j=0; j<4; j++) //loop through subarrays
{
	if(j>0) //subarray 1 is always enabled
	{
		if (get(('subarray' + (j+1) + '_enable')) == 0) //skip over disabled subarrays
			continue;
		else
			subarrays[j] = 1;
	}
	string = 'subarray' + to_string(j+1) + '_dc_voltage';
	dc_voltage = get(string); //Volts
	actual_voltage_hi[j] = max(dc_voltage); //Volts
	for(i=0; i<8760;i++)
	{
		if(sunup[i] == 1)
			if(dc_voltage[i] < actual_voltage_low[j]) //lowest voltage seen when the sun is up (system is operating)
				actual_voltage_low[j] = dc_voltage[i]; //Volts
	}
}

		t_dry = get('tdry');
		t_dry_min = min(t_dry);
		t_dry_max = max(t_dry);

		panel_degrad = 0.95;

		//if(get('module_model') == 0)													// Simple efficiency module model
		// 	bvoc = ????

		if(get('module_model') == 0)
		{
			incorrect_model_module = 1;
		}
		
		if(get('module_model') == 1)													// CEC performance model with module database
		{
			
			outln(get('module_name'));
			module_name = get('module_name');
			bvoc = get('cec_beta_oc');
			voc	= get('cec_v_oc_ref');
			vmp = get('cec_v_mp_ref');
			pmp = get('cec_p_mp_ref');
			incorrect_model_module = 0;
		}

		if(get('module_model') == 2)													// CEC performance model with user entered specifications
		{
			outln('User defined CEC parameters');
			voc = get('6par_voc');
			bvoc = get('6par_bvoc');
			vmp = get('6par_vmp');	
			incorrect_model_module = 1;
		}

		if(get('module_model') == 3)													// Sandia PV array performance model with module database												
		{
			
		
			outln(get('snl_module_name'));
			module_name = get('snl_module_name');
			voc = get('snl_ref_voc');
			bvoc = get('snl_bvoco');
			vmp = get('snl_ref_vmp');
			pmp = get('snl_ref_pmp');
			incorrect_model_module = 0;
		}

		if(get('module_model') == 4)													// IEC 61853 Single diode model
		{
			outln('User defined IEC parameters');
			voc = get('sd11par_Voc0');
			bvoc = get('sd11par_betaVoc');
			vmp = get('sd11par_Vmp0');
			incorrect_model_module = 1;
		}

// ========================================================== INVERTER DATA ==========================================================================	

		if(get('inverter_model') == 0) 													// Inverter CEC Database
		{
			max_dc_voltage 	= get('inv_snl_vdcmax');
			min_dc_voltage 	= get('inv_snl_mppt_low');
			max_dc_power 	= get('inv_snl_pdco');
			incorrect_model_inverter = 0;
		}

		if(get('inverter_model') == 1)													// Inverter Datasheet
		{
			max_dc_voltage 	= get('inv_ds_vdcmax');
			min_dc_voltage 	= get('inv_ds_mppt_low');
			max_dc_power	= get('inv_ds_pdco');
			incorrect_model_inverter = 0;

		}
	
		if(get('inverter_model') == 2)													// Inverter Part Load Curve
		{
			max_dc_voltage = get('inv_pd_vdcmax');
			min_dc_voltage = get('inv_pd_mppt_low');
			max_dc_power   = get('inv_pd_pdco');
			incorrect_model_inverter = 0;
		}
		
		if(get('inverter_model') == 3)													// Inverter CEC coefficient generator
		{
			max_dc_voltage	= get('inv_cec_cg_vdcmax');
			min_dc_voltage	= get('inv_cec_cg_mppt_low');
			max_dc_power	= get('inv_cec_cg_pdco');
			incorrect_model_inverter = 0;
		}
if (incorrect_model_module == 1 || incorrect_model_inverter == 1)
{
	msgbox("Incorrect module model selected for this macro. The macro only works with CEC/Sandia module database.");
	exit;
}



max_dc_voltage_calculated = get('user_modules_per_string') * (voc + bvoc * (t_dry_min - 25));
min_dc_voltage_calculated = get('user_modules_per_string') * (voc + bvoc * (t_dry_max - 25));
max_series_modules = max_dc_voltage / (voc + bvoc * (t_dry_min - 25));
inv_snl_vdcmax = get('inv_snl_vdcmax');
count_of_modules = 0;


// Create HTML Output Window******************************************************************************************************************************************************
red = ' bgcolor=#ff0000>';
orange = ' bgcolor=#ff9933>';
normal = '>';
str = '<html><body><h4>String Sizing Information</h4><p>Sizing information reported for case: ' + active_case() + '</p>';

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

str += '<h5>Tips for system design</h5><br>';
str += 'The maximum voltage produced by the array under open circuit condition is <b>' + max_dc_voltage_calculated + ' V</b>';
if (max_dc_voltage_calculated > inv_snl_vdcmax)
{
	str += " <ul><li> This is <b>greater</b> than the inverter's maximum voltage rating <b>(" + inv_snl_vdcmax + " V)</b>. Kaboooom! The inverter might get damage, eliminating any warranty</ul>";
}
else
{
	str += " <ul><li> This is ok as it is below the inverter's maximum voltage rating.</ul>";
}

str += '<br>';

if(max_dc_power / pmp > 1)
{
str += '<h6>You have <b>' + get('modules_per_string') + '</b> modules per string. The maximum number of modules per string should be <b>' + floor(max_series_modules) + ' </b> for the given case.</h6>';

str += '<br>';

if (clipped_hours > macro.clipping_time)
{
	
	if (get('module_model') == 3 || get('module_model') == 1)
	{
		
			str += '<h6> <b>' + get('annual_inv_cliploss') +' kWh</b> is being clipped.</h6>';
			str += "<b><u><h3>Suggestions for reducing clipping time.</b></u></h3>";
			str += "<br><h5>1. By reducing number of strings:</h5>"; 
			power_of_each_string = pmp * to_int(get('user_modules_per_string'));
			inv_cliploss = max(get('inv_cliploss'));
			reduction_in_string = inv_cliploss * 1000 / power_of_each_string;
		
			str += '<h6>The number of strings should be reduced by <b>' + floor(reduction_in_string) + '</b> to reduce clipping losses</h6>';
		
	
		
		{
			str += "<br><h5>2. By changing the modules used in string</h5>"; 
			str += '<h4>Module suggestions to reduce clipping loss</h4> <br>'; 
			
			is_empty = 1;

			if (to_int(get('module_model')) == 1)
			{
				module = csvread(left(runtimedir(),strlen(runtimedir())- 8) + 'libraries\\CEC Modules.csv',{ "delim"=',', "skip"=2, "table"=true });	// Reads the CEC Modules database
				for (i = 0; i < #module{"cec_v_oc_ref"}; i++)
				{
					if (macro.manufacturer == '2) From all manufacturers')
					{
						
						if (abs(to_int(voc * 100)/100 - to_int(to_real(module{"cec_v_oc_ref"}[i])*100)/100) < 2 && pmp - (to_real(module{"cec_v_mp_ref"}[i]) * to_real(module{"cec_i_mp_ref"}[i])) > 0 && module_name != module{"[0]"}[i])  
						{
							module_suggestions[count_of_modules] = module{"[0]"}[i];
							count_of_modules += 1;
							 
							//str += '    - ' + module{"[0]"}[i] + '<br>';
							is_empty = 0;
						}
					}
			
					elseif(macro.manufacturer == '1) From same manufacturer')
					{
						if (left(module_name,4) == left(module{"[0]"}[i],4) && abs(to_int(voc * 100)/100 - to_int(to_real(module{"cec_v_oc_ref"}[i])*100)/100) < 2 && pmp - (to_real(module{"cec_v_mp_ref"}[i]) * to_real(module{"cec_i_mp_ref"}[i])) > 0 && module_name != module{"[0]"}[i])
						{	
							str += '    - ' + module{"[0]"}[i] + '<br>';
							is_empty = 0;
						}
					}
				}
				
				if(count_of_modules > 20)
				{
					str += "<i><u>Due to large number of suggestions, the list has been reduced to one module per manufacturer</u></i> <br>";
					for(j = 0; j < count_of_modules - 1; j++)
					{
						if(left(module_suggestions[j],4) != left(module_suggestions[j+1],4))
						{
							str += '    - ' + module_suggestions[j] + '<br>';
						}
					}
					if (left(module_suggestions[count_of_modules - 1],4) != left(module_suggestions[count_of_modules - 2],4))
						str += '    - ' + module_suggestions[count_of_modules - 1] + '<br>';
					
				}
				
				if (count_of_modules > 0 && count_of_modules <=20)
				{
					for(j = 0; j < count_of_modules; j++)
					{
						str += '    - ' + module_suggestions[j] + '<br>';
					}				
				}
				
				
				
				if (is_empty != 0)
					str += 'Sorry, no modules found for suggestions';
			}
		
			if (to_int(get('module_model')) == 3)
			{
				module_db_sandia = csvread(left(runtimedir(),strlen(runtimedir())- 8) + 'libraries\\Sandia Modules.csv',{ "delim"=',', "skip"=2, "table"=true });
			
				for (i = 0; i < #module_db_sandia{"[0]"}; i++)
				{
					if (macro.manufacturer == '2) From all manufacturers')
					{
						if (abs(to_int(voc * 100)/100 - to_int(to_real(module_db_sandia{"snl_voco"}[i])*100)/100) <= 2 && pmp - (to_real(module_db_sandia{"snl_vmpo"}[i]) * to_real(module_db_sandia{"snl_impo"}[i])) > 0 && module_name != module_db_sandia{"[0]"}[i]) 
						{
							str += '    - ' + module_db_sandia{"[0]"}[i] + '<br>';
							is_empty = 0;
						}
					}
				
					elseif (macro.manufacturer == '1) From the same manufacturer')
					{
						if (left(module_name,4) == left(module_db_sandia{"[0]"}[i],4) && abs(to_int(voc * 100)/100 - to_int(to_real(module_db_sandia{"snl_voco"}[i])*100)/100) < 2 && pmp - (to_real(module_db_sandia{"snl_vmpo"}[i]) * to_real(module_db_sandia{"snl_impo"}[i])) > 0 && module_name != module_db_sandia{"[0]"}[i]) 
						{
							str += '    - ' + module_db_sandia{"[0]"}[i] + '<br>';
							is_empty = 0;
						}
					}
				}
				
				if (is_empty == 1)
					str += 'Sorry, no modules found for suggestions';
			
			}
	
	
		}
		
		
	}
	
	else
	{
		str += '<b> Power is being clipped';
	}
}
}

else
{
	str += '<h4>There is no suitable module-inverter combination for the selected one.</h4>';
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//DC-AC Ratio Information
str += '<h5>DC-AC Ratio</h5><br>';

if (financial)
	str += '<li>The effective Year ' + get('analysis_period') + ' DC-AC ratio is computed after light-induced degradation and annual module degradation have been applied. Assumes no inverter degradation.</li>';
str += '</ul>';
str += '<table bgcolor=#f0f0f0>';
str += '<tr><td bgcolor=#dddddd>Nameplate DC-AC Ratio </td><td>' + nameplate_dcac + '</td></tr>';
str += '<tr><td bgcolor=#dddddd>Effective DC-AC Ratio, Year 1 </td><td>' + first_yr_dcac + '</td></tr>';
if (financial)
	str += '<tr><td bgcolor=#dddddd>Effective DC-AC Ratio, Year ' + get('analysis_period') + ' </td><td>' + last_yr_dcac + '</td></tr>';
str += '</table><br><br>';

//Inverter Clipping Information
str += '<h5>First Year Inverter Clipping Losses</h5><br>';
str += '<table bgcolor=#f0f0f0><tr><td>&nbsp</td><td>Power Limiting</td><td>MPPT Voltage Limiting</td>';
fillcolor = normal;
mpptfillcolor = normal;
if (clipped_hours > 438) fillcolor = orange; //clipping more than 5% of the time
if (clipped_hours > 876) fillcolor = red; //clipping more than 10% of the time
if (mppt_hours > 438) mpptfillcolor = orange; //clipping more than 5% of the time
if (mppt_hours > 876) mpptfillcolor = red; //clipping more than 10% of the time
str += '<tr><td bgcolor=#dddddd>Number of Hours Clipped </td><td' + fillcolor + clipped_hours + '</td><td' + mpptfillcolor + mppt_hours + '</tr>';
str += '<tr><td bgcolor=#dddddd>Total kWh (AC) lost </td><td>' + clipped_power + '</td><td>' + mppt_power + '</tr>';
fillcolor = normal;
mpptfillcolor = normal;
if (clipped_percent_ac > 20) fillcolor = orange; //clipping more than 20% of the power
if (clipped_percent_ac > 50) fillcolor = red; //clipping more than 50% of the power
if (mppt_percent_ac > 20) mpptfillcolor = orange; //clipping more than 20% of the power
if (mppt_percent_ac > 50) mpptfillcolor = red; //clipping more than 50% of the power
str += '<tr><td bgcolor=#dddddd>% of AC Power lost </td><td' + fillcolor + clipped_percent_ac + '</td><td' + mpptfillcolor + mppt_percent_ac + '</tr>';
if (clipped_percent_dc > 20) fillcolor = orange; //clipping more than 20% of the power
if (clipped_percent_dc > 50) fillcolor = red; //clipping more than 50% of the power
if (mppt_percent_dc > 20) mpptfillcolor = orange; //clipping more than 20% of the power
if (mppt_percent_dc > 50) mpptfillcolor = red; //clipping more than 50% of the power
str += '<tr><td bgcolor=#dddddd>% of DC Power lost </td><td' + fillcolor + clipped_percent_dc + '</td><td' + mpptfillcolor + mppt_percent_dc + '</tr>';
str += '</table><br><br>';

//Inverter MPPT Performance

str += '<h5>Inverter MPPT Performance</h5><br>';

str += '<table bgcolor=#f0f0f0>';
//first row
str += '<tr><td>Inverter Specifications</td><td> V </td><td>Actual System Voltages</td>';
for(i=0; i<4; i++)
	if(subarrays[i] == 1)
		str += '<td>Subarray ' + (i+1) + '</td>';
str += '</tr>';
//second row
str += '<tr><td bgcolor=#dddddd>MPPT Voltage Minimum </td><td> ' + inv_mppt_low + ' </td><td bgcolor=#dddddd>Actual Voltage Minimum </td>';
for(i=0; i<4; i++)
	if(subarrays[i] == 1)
	{	
		if (actual_voltage_low[i] <= inv_mppt_low) fillcolor = orange;
		else fillcolor = normal;
		str += '<td' + fillcolor + actual_voltage_low[i] + '</font></td>';
	}
str += '</tr>';
//third row
str += '<tr><td bgcolor=#dddddd>MPPT Voltage Maximum </td><td> ' + inv_mppt_hi + ' </td><td bgcolor=#dddddd>Actual Voltage Maximum </td>';
for(i=0; i<4; i++)
	if(subarrays[i] == 1)
	{	
		if (actual_voltage_hi[i] >= inv_mppt_hi) fillcolor = orange;
		else fillcolor = normal;
		str += '<td' + fillcolor + actual_voltage_hi[i] + '</font></td>';
	}
str += '</tr>';
//fourth row
str += '<tr><td bgcolor=#dddddd>Maximum Allowable Voltage </td><td> ' + inv_voltage_max + ' </td><td bgcolor=#dddddd>Actual Maximum Voltage </td>';
for(i=0; i<4; i++)
	if(subarrays[i] == 1)
	{	
		if (actual_voltage_hi[i] >= inv_voltage_max) fillcolor = red;
		else fillcolor = normal;
		str += '<td' + fillcolor + actual_voltage_hi[i] + '</font></td>';
	}
str += '</tr>';
//end table
str += '</table><br><br>';





str += '</body></html>';
html_dialog(str, 'Inverter Sizing Results', [1000, 800]); //custom window title and size
//html_dialog(str, 'Inverter Sizing Results', [ 10, 10, 1000, 800 ]); // custom title, window position and size